// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`returns a module for the asciidoc file 1`] = `
Object {
  "filename": "test.adoc",
  "html": "<div class=\\"paragraph\\">
<p>It’s fair to say that React 16.8 and the introduction of
<a href=\\"https://reactjs.org/docs/hooks-intro.html\\">hooks</a> has really changed how
we write React. Hooks are one of those APIs that make you realise the
flaws of the previous approach <em>after</em> you stop using it. I remember
being very skeptical of hooks when they were first released, not
thinking that the previous class based design had many flaws, but I’ve
since come to realise I was very wrong, and hooks are a vast improvement
on how we build React components. If you’re interested in comparing the
old vs the new, I wrote a <a href=\\"/refactoring-to-react-hooks/\\">blog post
refactoring a component to use hooks</a> that offers a nice comparison.</p>
</div>
<div class=\\"listingblock\\">
<div class=\\"content\\">
<pre tabindex=\\"0\\" class=\\"highlight\\"><code class=\\"language-python\\" data-lang=\\"python\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">()</span>:</span>
    <span class=\\"hljs-keyword\\">pass</span></code></pre>
</div>
</div>
<div class=\\"admonitionblock warning\\">
<table>
<tr>
<td class=\\"icon\\">
<div class=\\"title\\">Warning</div>
</td>
<td class=\\"content\\">
Wolpertingers are known to nest in server racks.
Enter at your own risk.
</td>
</tr>
</table>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">void main</div>
<div class=\\"content\\">
<pre tabindex=\\"0\\" class=\\"highlight\\"><code class=\\"language-cpp\\" data-lang=\\"cpp\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">int</span> <span class=\\"hljs-title\\">main</span> <span class=\\"hljs-params\\">()</span> </span>{
    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;
}</code></pre>
</div>
</div>
<div class=\\"listingblock\\">
<div class=\\"title\\">bash file include</div>
<div class=\\"content\\">
<pre tabindex=\\"0\\" class=\\"highlight\\"><code class=\\"language-bash\\" data-lang=\\"bash\\">FILES=*.md
<span class=\\"hljs-keyword\\">for</span> f <span class=\\"hljs-keyword\\">in</span> <span class=\\"hljs-variable\\">$FILES</span>
<span class=\\"hljs-keyword\\">do</span>
  filename=<span class=\\"hljs-string\\">\\"<span class=\\"hljs-variable\\">\${f%.*}</span>\\"</span>
  <span class=\\"hljs-built_in\\">echo</span> <span class=\\"hljs-string\\">\\"Converting <span class=\\"hljs-variable\\">$f</span> to <span class=\\"hljs-variable\\">$filename</span>.adoc\\"</span>
  \`pandoc <span class=\\"hljs-variable\\">$f</span> -f markdown -t asciidoctor -o <span class=\\"hljs-variable\\">$filename</span>.adoc\`
<span class=\\"hljs-keyword\\">done</span></code></pre>
</div>
</div>",
  "metadata": Object {
    "appendix-caption": "Appendix",
    "appendix-refsig": "Appendix",
    "asciidoctor": "",
    "asciidoctor-version": "2.0.10",
    "asdf": "made up attr",
    "attribute-missing": "skip",
    "attribute-undefined": "drop-line",
    "author": "Doc Writer",
    "authorcount": 1,
    "authorinitials": "DW",
    "authors": "Doc Writer",
    "backend": "html5",
    "backend-html5": "",
    "backend-html5-doctype-article": "",
    "basebackend": "html",
    "basebackend-html": "",
    "basebackend-html-doctype-article": "",
    "caution-caption": "Caution",
    "chapter-refsig": "Chapter",
    "docdate": "2020-11-01",
    "docdatetime": "2020-11-01 20:16:17 +0100",
    "docdir": "",
    "docfile": "test.adoc",
    "docfilesuffix": ".adoc",
    "docname": "test",
    "doctime": "20:16:17 +0100",
    "doctitle": "My Document's Title",
    "doctype": "article",
    "doctype-article": "",
    "docyear": "2020",
    "email": "doc.writer@asciidoctor.org",
    "embedded": "",
    "example-caption": "Example",
    "figure-caption": "Figure",
    "filetype": "html",
    "filetype-html": "",
    "firstname": "Doc",
    "htmlsyntax": "html",
    "iconfont-remote": "",
    "iconsdir": "./images/icons",
    "important-caption": "Important",
    "intro": "A short post today about an easy tactic to avoid your useEffect calls becoming recursive when setting state.",
    "last-update-label": "Last updated",
    "lastname": "Writer",
    "layout": "post",
    "linkcss": "",
    "localdate": undefined,
    "localdatetime": undefined,
    "localtime": undefined,
    "localyear": undefined,
    "max-attribute-value-size": 4096,
    "max-include-depth": 64,
    "note-caption": "Note",
    "notitle": "",
    "outfilesuffix": ".html",
    "part-refsig": "Part",
    "prewrap": "",
    "revdate": "2014-01-01",
    "revnumber": "1.0",
    "safe-mode-level": 20,
    "safe-mode-name": "secure",
    "safe-mode-secure": "",
    "sectids": "",
    "section-refsig": "Section",
    "stylesdir": ".",
    "stylesheet": "",
    "table-caption": "Table",
    "tip-caption": "Tip",
    "title": "'Avoiding recursive useEffect hooks in React'",
    "toc-placement": "auto",
    "toc-title": "Table of Contents",
    "untitled-label": "Untitled",
    "user-home": ".",
    "version-label": "Version",
    "warning-caption": "Warning",
    "webfonts": "",
  },
  "path": "/home/carlos/workspace/rollup-plugin-asciidoc/__tests__/fixtures/test.adoc",
}
`;
